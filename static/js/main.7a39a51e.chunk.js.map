{"version":3,"sources":["components/Button.jsx","components/Display.jsx","main/Calculator.jsx","serviceWorker.js","index.js"],"names":["components_Button","props","btnColor","clear","operation","equal","classe","react_default","a","createElement","onClick","e","click","label","className","components_Display","value","initialState","displayValue","clearDisplay","values","current","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","objectSpread","clearMemory","bind","assertThisInitialized","setOperation","addDigit","setState","toConsumableArray","equals","currentOperation","result","Math","pow","sqrt","isNaN","Infinity","n","includes","i","newValue","parseFloat","Component","Boolean","window","location","hostname","match","ReactDOM","render","Calculator_Calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a39a51e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nexport default props => {\r\n\r\n    let btnColor = 'btn-light ';\r\n    if (props.clear) {\r\n        btnColor = 'btn-danger ';\r\n    }\r\n    if (props.operation) {\r\n        btnColor = 'btn-warning ';\r\n    }\r\n    if (props.equal) {\r\n        btnColor = 'btn-success ';\r\n    }\r\n\r\n    let classe = 'btn ' + btnColor;\r\n\r\n    return (\r\n        <button\r\n            onClick={e => props.click && props.click(props.label)}\r\n            className={classe}>\r\n            {props.label}\r\n        </button>\r\n    )\r\n}","import React from 'react'\r\nimport '../components/Display.css'\r\n\r\nexport default props => <div className=\"display\">{props.value}</div>","import React, { Component } from 'react'\r\nimport './Calculator.css'\r\nimport '@fortawesome/fontawesome-free/css/all.min.css'\r\n\r\nimport Button from '../components/Button'\r\nimport Display from '../components/Display'\r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0, 0],\r\n    current: 0\r\n}\r\n\r\nexport default class Calculator extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.clearMemory = this.clearMemory.bind(this)\r\n        this.setOperation = this.setOperation.bind(this)\r\n        this.addDigit = this.addDigit.bind(this)\r\n    }\r\n\r\n    state = { ...initialState }\r\n\r\n    clearMemory() {\r\n        this.setState({ ...initialState })\r\n    }\r\n\r\n    setOperation(operation) {\r\n\r\n        const values = [...this.state.values];\r\n\r\n        if (this.state.current === 0) {\r\n            this.setState({ operation, current: 1, clearDisplay: true });\r\n            return;\r\n        }\r\n\r\n        let equals = operation === \"=\";\r\n        const currentOperation = this.state.operation;\r\n\r\n        let result = this.state.values[0];\r\n        if ((currentOperation === '+' || currentOperation === '-') && operation === '%') {\r\n            if (currentOperation === '+') {\r\n                result = values[0] + (values[1] * (values[0] / 100));\r\n            } else {\r\n                result = values[0] - (values[1] * (values[0] / 100));\r\n            }\r\n            equals = \"=\";\r\n        } else if (currentOperation === 'x²') {\r\n            result = values[0] ** values[1];\r\n        } else if (currentOperation === '+') {\r\n            result = values[0] + values[1];\r\n        } else if (currentOperation === '-') {\r\n            result = values[0] - values[1];\r\n        } else if (currentOperation === '÷') {\r\n            result = values[0] / values[1];\r\n        } else if (currentOperation === '×') {\r\n            result = values[0] * values[1];\r\n        } else if (currentOperation === '√') {\r\n            result = Math.sqrt(values[1]);\r\n        } else if (currentOperation === '%') {\r\n            result = (values[1] * (values[0] / 100));\r\n        }\r\n\r\n        values[0] = isNaN(result) || result === Infinity ? '0' : result;\r\n        values[1] = 0;\r\n\r\n        this.setState({\r\n            displayValue: values[0],\r\n            clearDisplay: !equals,\r\n            operation: equals ? null : operation,\r\n            values,\r\n            current: equals ? 0 : 1\r\n        });\r\n    }\r\n\r\n    addDigit(n) {\r\n        if (n === '.' && this.state.displayValue.includes('.')) {\r\n            return;\r\n        }\r\n\r\n        const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay;\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue;\r\n        const displayValue = currentValue + n;\r\n        this.setState({ displayValue, clearDisplay: false});\r\n\r\n        if (n !== '.') {\r\n            const i = this.state.current;\r\n            const newValue = parseFloat(displayValue);\r\n            const values = [...this.state.values];\r\n            values[i] = newValue;\r\n            this.setState({ values })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row justify-content-center align-items-center\">\r\n                <div className=\"col-lg-6 col-md-12 col-sm-12 col-xs-12\">\r\n                    <h1 className=\"text-white\"><i className=\"fas fa-calculator text-body\"></i> Calculator</h1>\r\n                    <div className=\"card text-white bg-dark\">\r\n                        <div className=\"card-header\">\r\n                            <Display value={this.state.displayValue}/>\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12  calculator\">\r\n                                    <Button label=\"C\"   click={this.clearMemory} clear />\r\n                                    <Button label=\"%\"   click={this.setOperation} operation />\r\n                                    <Button label=\"x²\"  click={this.setOperation} operation />\r\n                                    <Button label=\"√\"   click={this.setOperation} operation />\r\n                                    <Button label=\"7\"   click={this.addDigit} />\r\n                                    <Button label=\"8\"   click={this.addDigit} />\r\n                                    <Button label=\"9\"   click={this.addDigit} />\r\n                                    <Button label=\"÷\"   click={this.setOperation} operation />\r\n                                    <Button label=\"4\"   click={this.addDigit} />\r\n                                    <Button label=\"5\"   click={this.addDigit} />\r\n                                    <Button label=\"6\"   click={this.addDigit} />\r\n                                    <Button label=\"×\"   click={this.setOperation} operation />\r\n                                    <Button label=\"1\"   click={this.addDigit} />\r\n                                    <Button label=\"2\"   click={this.addDigit} />\r\n                                    <Button label=\"3\"   click={this.addDigit} />\r\n                                    <Button label=\"-\"   click={this.setOperation} operation />\r\n                                    <Button label=\"0\"   click={this.addDigit} />\r\n                                    <Button label=\".\"   click={this.addDigit} />\r\n                                    <Button label=\"=\"   click={this.setOperation} equal />\r\n                                    <Button label=\"+\"   click={this.setOperation} operation />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Calculator from './main/Calculator';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <div className=\"container text-center mt-3\">\r\n        <Calculator />\r\n    </div>\r\n, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}