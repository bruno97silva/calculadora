{"version":3,"sources":["components/Button.jsx","components/Display.jsx","main/Calculator.jsx","serviceWorker.js","index.js"],"names":["components_Button","props","btnColor","clear","operation","equal","classes","double","triple","react_default","a","createElement","onClick","e","click","label","className","components_Display","value","initialState","displayValue","clearDisplay","values","current","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","objectSpread","clearMemory","bind","assertThisInitialized","setOperation","addDigit","setState","toConsumableArray","result","equals","currentOperation","console","log","Math","sqrt","isNaN","Infinity","n","includes","i","newValue","parseFloat","Component","Boolean","window","location","hostname","match","ReactDOM","render","Calculator_Calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc6464ed.chunk.js","sourcesContent":["import React from 'react'\nimport './Button.css'\n\nexport default props => {\n\n    let btnColor = 'btn-light ';\n    if (props.clear) {\n        btnColor = 'btn-danger ';\n    }\n    if (props.operation) {\n        btnColor = 'btn-warning ';\n    }\n    if (props.equal) {\n        btnColor = 'btn-success ';\n    }\n\n    let classes = 'btn ' + btnColor\n    classes += props.double ? 'double' : ''\n    classes += props.triple ? 'triple' : ''\n\n    return (\n        <button\n            onClick={e => props.click && props.click(props.label)}\n            className={classes}>\n            {props.label}\n        </button>\n    )\n}","import React from 'react'\nimport '../components/Display.css'\n\nexport default props => <div className=\"display\">{props.value}</div>","import React, { Component } from 'react'\nimport './Calculator.css'\n\nimport Button from '../components/Button'\nimport Display from '../components/Display'\n\nconst initialState = {\n    displayValue: '0',\n    clearDisplay: false,\n    operation: null,\n    values: [0, 0],\n    current: 0\n}\n\nexport default class Calculator extends Component {\n\n    constructor(props) {\n        super(props)\n        this.clearMemory = this.clearMemory.bind(this)\n        this.setOperation = this.setOperation.bind(this)\n        this.addDigit = this.addDigit.bind(this)\n    }\n\n    state = { ...initialState }\n\n    clearMemory() {\n        this.setState({ ...initialState })\n    }\n\n    setOperation(operation) {\n\n        const values = [...this.state.values];\n\n        if (this.state.current === 0) {\n            this.setState({ operation, current: 1, clearDisplay: true });\n            return;\n        }\n\n        const equals = operation === \"=\";\n        const currentOperation = this.state.operation;\n\n        console.log(equals);\n        console.log(currentOperation);\n        let result;\n        switch(currentOperation) {\n            case '+':\n                result = values[0] + values[1];\n                break;\n            case '-':\n                result = values[0] - values[1];\n                break;\n            case '/':\n                result = values[0] / values[1];\n                break;\n            case '*':\n                result = values[0] * values[1];\n                break;\n            case '√':\n                result = Math.sqrt(values[1]);\n                break;\n            default:\n                result = this.state.values[0];\n        }\n\n        values[0] = isNaN(result) || result === Infinity ? '0' : result;\n        values[1] = 0;\n\n        this.setState({\n            displayValue: values[0],\n            clearDisplay: !equals,\n            operation: equals ? null : operation,\n            values,\n            current: equals ? 0 : 1\n        });\n    }\n\n    addDigit(n) {\n        if (n === '.' && this.state.displayValue.includes('.')) {\n            return;\n        }\n\n        const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay;\n        const currentValue = clearDisplay ? '' : this.state.displayValue;\n        const displayValue = currentValue + n;\n        this.setState({ displayValue, clearDisplay: false});\n\n        if (n !== '.') {\n            const i = this.state.current;\n            const newValue = parseFloat(displayValue);\n            const values = [...this.state.values];\n            values[i] = newValue;\n            this.setState({ values })\n            console.log(values);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"row justify-content-center align-items-center\">\n                <div className=\"col-lg-6 col-md-12 col-sm-12 col-xs-12\">\n                    <h1>Calculator</h1>\n                    <div className=\"card text-white bg-dark mb-5 mt-1\">\n                        <div className=\"card-header\">\n                            <Display value={this.state.displayValue}/>\n                        </div>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12  calculator\">\n                                    <Button label=\"C\" click={this.clearMemory} clear/>\n                                    <Button label=\"%\" click={this.setOperation} operation/>\n                                    <Button label=\"√\" click={this.setOperation} operation/>\n                                    <Button label=\"/\" click={this.setOperation} operation />\n                                    <Button label=\"7\" click={this.addDigit} />\n                                    <Button label=\"8\" click={this.addDigit} />\n                                    <Button label=\"9\" click={this.addDigit} />\n                                    <Button label=\"*\" click={this.setOperation} operation />\n                                    <Button label=\"4\" click={this.addDigit} />\n                                    <Button label=\"5\" click={this.addDigit} />\n                                    <Button label=\"6\" click={this.addDigit} />\n                                    <Button label=\"-\" click={this.setOperation} operation />\n                                    <Button label=\"1\" click={this.addDigit} />\n                                    <Button label=\"2\" click={this.addDigit} />\n                                    <Button label=\"3\" click={this.addDigit} />\n                                    <Button label=\"+\" click={this.setOperation} operation />\n                                    <Button label=\"0\" click={this.addDigit} double/>\n                                    <Button label=\".\" click={this.addDigit} />\n                                    <Button label=\"=\" click={this.setOperation} equal />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Calculator from './main/Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div className=\"container text-center\">\n        <Calculator />\n    </div>\n, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}